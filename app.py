from flask import Flask, request, Response
import json
import requests
import threading
from config import TOKEN, CONFIRMATION_TOKEN, SECRET_KEY, API_VERSION

app = Flask(__name__)

with open("qa_data.json", "r", encoding="utf-8") as f:
    qa_data = json.load(f)

with open("badwords.txt", "r", encoding="utf-8") as f:
    bad_words = set(line.strip().lower() for line in f if line.strip())

def contains_bad_words(text):
    return any(word in text.lower() for word in bad_words)

def get_answer(message):
    msg = message.lower()
    for question in qa_data:
        if question in msg:
            return qa_data[question]
    if msg.endswith("?") and any(x in msg for x in ["–º–æ–∂–Ω–æ", "–≤–æ–∑–º–æ–∂–Ω–æ", "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ", "–¥–æ—Å—Ç—É–ø–Ω–æ", "–º–æ–≥—É"]):
        return "–î–∞."
    return None

def send_message(user_id, message):
    params = {
        "user_id": user_id,
        "message": message,
        "random_id": 0,
        "access_token": TOKEN,
        "v": API_VERSION
    }
    try:
        requests.post("https://api.vk.com/method/messages.send", params=params, timeout=1)
    except requests.exceptions.RequestException:
        pass

def send_message_async(user_id, message):
    thread = threading.Thread(target=send_message, args=(user_id, message))
    thread.start()

@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()

    if data.get("type") == "confirmation":
        return Response(CONFIRMATION_TOKEN, status=200, mimetype='text/plain')

    if data.get("secret") != SECRET_KEY:
        return Response("invalid secret", status=403)

    if data.get("type") == "message_new":
        message = data["object"]["message"]["text"]
        user_id = data["object"]["message"]["from_id"]

        if contains_bad_words(message):
            send_message_async(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.")
        else:
            answer = get_answer(message)
            if answer:
                send_message_async(user_id, answer)
            else:
                send_message_async(user_id,
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ üòï\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ: https://edu.vk.com/projects")

    # –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok —Å—Ä–∞–∑—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    return Response("ok", status=200)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, threaded=True)
