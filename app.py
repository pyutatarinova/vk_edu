import threading
import json
from flask import Flask, request
import requests
import config
import re

app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config.py
TOKEN = config.TOKEN
CONFIRMATION_TOKEN = config.CONFIRMATION_TOKEN
SECRET_KEY = config.SECRET_KEY
API_VERSION = config.API_VERSION

# –ó–∞–≥—Ä—É–∑–∫–∞ QA –±–∞–∑—ã
with open("qa_data.json", encoding="utf-8") as f:
    qa_data = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
with open("badwords.txt", encoding="utf-8") as f:
    bad_words = set(line.strip().lower() for line in f if line.strip())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
def contains_bad_words(text):
    words = re.findall(r'\w+', text.lower())
    return any(bw in words for bw in bad_words)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
def show_help():
    return (
        "üëã –Ø –±–æ—Ç VK Education!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö VK\n"
        "‚Ä¢ –ì–¥–µ –∏ –∫–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±–∏–Ω–∞—Ä—ã\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–æ—Å–∏:\n"
        "‚Ä¢ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?\n"
        "‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ –≤–µ–±–∏–Ω–∞—Ä—ã?\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å /–ø–æ–º–æ—â—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )

# –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def get_answer(message):
    msg = message.lower()

    if msg.startswith("/") or msg in ["–ø–æ–º–æ—â—å", "start", "–Ω–∞—á–∞—Ç—å"]:
        return show_help()

    for item in qa_data:
        if any(word in msg for word in item["keywords"]):
            return item["answer"]

    if msg.endswith("?") and any(x in msg for x in ["–º–æ–∂–Ω–æ", "–≤–æ–∑–º–æ–∂–Ω–æ", "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ", "–¥–æ—Å—Ç—É–ø–Ω–æ", "–º–æ–≥—É"]):
        return "–î–∞."

    return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(user_id, message):
    params = {
        "user_id": user_id,
        "message": message,
        "random_id": 0,
        "access_token": TOKEN,
        "v": API_VERSION
    }
    try:
        requests.post("https://api.vk.com/method/messages.send", params=params, timeout=2)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def process_message(data):
    message = data["object"]["message"]["text"]
    user_id = data["object"]["message"]["from_id"]

    if contains_bad_words(message):
        send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.")
    else:
        answer = get_answer(message)
        if answer:
            send_message(user_id, answer)
        else:
            send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ üòï\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ: https://edu.vk.com/projects")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Callback –æ—Ç VK
@app.route("/", methods=["POST"])
def main():
    data = request.get_json()
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:", data)

    if data.get("type") == "confirmation":
        return CONFIRMATION_TOKEN, 200

    if data.get("secret") != SECRET_KEY:
        return "invalid secret", 403

    if data.get("type") == "message_new":
        threading.Thread(target=process_message, args=(data,)).start()
        return "ok", 200

    return "ok", 200

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    from config import TOKEN, CONFIRMATION_TOKEN, SECRET_KEY
    app.run(host="0.0.0.0", port=5000)
